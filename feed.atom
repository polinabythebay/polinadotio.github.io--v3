<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Recent Articles</title>
  <id>http://octocat-cafe.me/feed.atom</id>
  <updated>2014-03-15T00:00:00Z</updated>
  <link href="http://octocat-cafe.me/" />
  <link href="http://octocat-cafe.me/feed.atom" rel="self" />
  <generator>Werkzeug</generator>
  <entry xml:base="http://octocat-cafe.me/feed.atom">
    <title type="text">A Short Guide to Email Spoofing</title>
    <id>http://octocat-cafe.me/blog/email-spoofing.html</id>
    <updated>2014-03-15T00:00:00Z</updated>
    <published>2014-03-15T00:00:00Z</published>
    <link href="http://octocat-cafe.me/blog/email-spoofing.html" />
    <author>
      <name>Polina Soshnin</name>
    </author>
    <content type="html">&lt;p&gt;This is a fun trick I learned that uses a few basic networking concepts. I didn't realize how easy it was to send spoof email via command line. Here's how:&lt;/p&gt;
&lt;h4&gt;Basic idea:&lt;/h4&gt;
&lt;p&gt;Establish a TCP connection to a mail server and use SMTP commands to send email from &quot;anyone&quot; to &quot;anyone&quot;. :) You'll see what I mean. &lt;/p&gt;
&lt;h4&gt;Concepts:&lt;/h4&gt;
&lt;p&gt;TCP, or the Transmission Control Protocol, is a transport layer protocol used for establishing logical communication between applications and different hosts that are not physically connected to one another. Applications can be ones running on your computer (a local host) or the internet (Gmail for example). In this case, I am using TCP to establish a connection from my linux account on a college server to a google mail server. SMTP is the Simple Mail Transfer Protocol that is the de facto standard for sending email across the internet. It's been around since 1982 and is very minimal-- to this day it will only support 7 bit ASCII characters, which amuses me when I think of multimedia email attachments these days. In this example I'm going to use telnet to manually send mail through an SMTP mail server. &lt;/p&gt;
&lt;h4&gt;Step 1: Establish a TCP Connection&lt;/h4&gt;
&lt;p&gt;In order to send SMTP commands to a mail server you need to know the host name of the mail server for your domain. My domain is wellesley.edu, so I'm going to first query the DNS for the MX record that holds information about my mail domain. &lt;/p&gt;
&lt;p&gt;SSH into my linux account:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh -Y psoshnin@cs.wellesley.edu
psoshnin@cs.wellesley.edu&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;s password:
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;psoshnin@tempest~&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Query DNS for the mail servers that deliver mail to wellesley.edu:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;psoshnin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tempest&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; nslookup -type=MX wellesley.edu&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;Server:         149.130.10.16&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;Address:        149.130.10.16#53&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;wellesley.edu   mail exchanger = 5 ALT2.ASPMX.L.GOOGLE.COM.&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;wellesley.edu   mail exchanger = 10 ASPMX2.GOOGLEMAIL.COM.&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;wellesley.edu   mail exchanger = 10 ASPMX3.GOOGLEMAIL.COM.&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;wellesley.edu   mail exchanger = 1 ASPMX.L.GOOGLE.COM.&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;wellesley.edu   mail exchanger = 5 ALT1.ASPMX.L.GOOGLE.COM.&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;psoshnin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tempest&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From here you can see that Wellesley has 5 different mail servers through Google mail services. We need to pick one of them-- let's pick ALT2.ASPMX.L.GOOGLE.COM. We use telnet to establish the connection and use port 25 because it's a TCP connection:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;psoshnin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tempest&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; telnet ALT2.ASPMX.L.GOOGLE.COM 25&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;Trying 173.194.65.27...&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;Connected to ALT2.ASPMX.L.GOOGLE.COM.&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;Escape character is &amp;#39;^]&amp;#39;.&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;220 mx.google.com ESMTP u6si42550271een.213 -gsmtp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Step two: Use SMTP commands to send an email&lt;/h4&gt;
&lt;p&gt;Yay we're connected! Now here's where the fun begins. Let's enter in some commands to send a message. A basic message for SMTP needs the following:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;MAIL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sending&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RCPT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Receiver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;receiving&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;FROM:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;an&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;T0:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;an&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;SUBJECT:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Body&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;QUIT&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that there's a period [.] at the end. You will need that. Let's try this!&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;psoshnin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tempest&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; telnet ALT2.ASPMX.L.GOOGLE.COM 25&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;Trying 173.194.65.27...&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;Connected to ALT2.ASPMX.L.GOOGLE.COM.&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;Escape character is &amp;#39;^]&amp;#39;.&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;220 mx.google.com ESMTP u6si42550271een.213 -gsmtp&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;HELO psoshnin@wellesley.edu&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;250 mx.google.com at your service&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;MAIL FROM: &amp;lt;god@heaven.onearth&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;250 2.1.0 OK u6si4550271een.213 -gsmtp&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;RCPT TO: &amp;lt;me@polina.io&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;250 2.1.0 OK u6si42250271een.213 -gsmtp&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;DATA&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;350 Go ahead u6si42550271een.213 -gsmtp&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;FROM: God &amp;lt;god@heaven.onearth&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;TO: Earthling &amp;lt;why@hello.earthling&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;SUBJECT: Hello world!&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;Hello world! I should visit more.&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;-God&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;250 2.0.0 OK 1392756346 u6si42550271een.213 -gsmtp&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;QUIT&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;221 2.0.0 closing connection u6si42550271een.213 -gsmtp&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;Connection closed by foreign host.&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;psoshnin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tempest&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And there you have it. Note: you might need to check your spam folder. &lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Alt text&quot; src=&quot;/static/helloworld.png&quot; /&gt;&lt;/p&gt;</content>
  </entry>
  <entry xml:base="http://octocat-cafe.me/feed.atom">
    <title type="text">Learning iOS Development</title>
    <id>http://octocat-cafe.me/blog/ios-dev-01.html</id>
    <updated>2014-03-15T00:00:00Z</updated>
    <published>2014-03-15T00:00:00Z</published>
    <link href="http://octocat-cafe.me/blog/ios-dev-01.html" />
    <author>
      <name>Polina Soshnin</name>
    </author>
    <content type="html">&lt;p&gt;Taking steps to become an iOS developer.&lt;/p&gt;
&lt;p&gt;Starting the bitfountain iOS 7 immersive course. This uses Xcode 5.1.1 and Objective C. I thought this would be beneficial because a lot of apps still use ObjC and some companies may even still be on 5.1.1 and I want to know what the differences are. &lt;/p&gt;
&lt;p&gt;The phases for me are:&lt;/p&gt;
&lt;p&gt;Phase 1: Self instruction&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Do Bitfountain courses on my own (iOS 7 and 8)&lt;/li&gt;
&lt;li&gt;Go through Objective C Nerd Ranch book&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;--&amp;gt; get exposure to ObjC and multiple versions of Xcode. Blog about it. &lt;/p&gt;
&lt;p&gt;Phase 2: Apprenticeship&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Enroll at Bloc and build several apps with the help of a senior developer&lt;/li&gt;
&lt;li&gt;Network&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Phase 3: Interview for an entry level iOS developer gig&lt;/p&gt;</content>
  </entry>
  <entry xml:base="http://octocat-cafe.me/feed.atom">
    <title type="text">Creating a blogging site with Flask and Github Pages</title>
    <id>http://octocat-cafe.me/blog/setting-up-this-site.html</id>
    <updated>2014-03-15T00:00:00Z</updated>
    <published>2014-03-15T00:00:00Z</published>
    <link href="http://octocat-cafe.me/blog/setting-up-this-site.html" />
    <author>
      <name>Polina Soshnin</name>
    </author>
    <content type="html">&lt;p&gt;There are many ways to go about hosting a personal blog/landing page. One of my favorite is via Github pages. It's free and there are options just as Jekyl or Octopress to create an out of the box site for you. There's also the option of rolling your own to deploy on Github pages, which I'll touch on.&lt;/p&gt;
&lt;p&gt;http://jekyllrb.com/&lt;/p&gt;
&lt;p&gt;The one main thing you need to take into consideration when making a site for Github pages is that it needs to be a static site. This means the site is composed entirely of HTML, CSS, and JavaScript and it needs to be able to be hosted without any server-side software other than a traditional web server. There's no database you can hook into or Python code on the server side. So how would you go about this? At first it seems like you could just manually create all of your HTML/CSS/JS files yourself and then just commit them, but that's a pretty tedious endeavor and pretty disorganized.&lt;/p&gt;
&lt;p&gt;What we need ideally is some way of gracefully handling two issues that web frameworks are meant to solve: routing and templates. In addition to that, we'll need to find a better way of generating these files and pushing the static content to Github. The reason using a web framework in general is a good idea is because they will handle HTTP reqeusts and responses for us, which will be handy. Some web frameworks also have certain architectual patterns built in as well, such as the MVC pattern in Django and Rails. &lt;/p&gt;
&lt;p&gt;Routing and Templates&lt;/p&gt;
&lt;p&gt;The two big issues that come when building a web application are: how do you map the requested URL from the browser to the code that handles it (routes), and how do we create HTML dynamically (templates)? Those are the two questions we'll need an answer to, and every web framework handles it slightly differenty. &lt;/p&gt;
&lt;p&gt;That's where Flask comes in. Flask is a python microframework for developing web applications, and in my opinion it's a great way to play around with python and the web without having the overhead that comes with learning a heavyweight framework such as Rails or Django. Flask works like other Python web frameworks work: it receives HTTP requests, dispatches code that generates HTML, and creates an HTTP response with that content. This is how all major server-side frameworks work (excluding JavaScript frameworks).&lt;/p&gt;
&lt;p&gt;Flask handles routes by hooking up a function to a requested URL via a route() decorator. Here's an example of routing to the base URL:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Flask also lets you create dynamic URLs:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_post_or_404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That solves our routing issue. Next up, Flask uses Jinja2 for templating. One great thing about Jinja2 is that it will cache your templates so that subsequent requests with the exact same arguments are returned from the cache instead of re-rendered. &lt;/p&gt;
&lt;p&gt;Flask lets us create a site without having to worry about routing or templating, but what about generating static content? We will need to a way to make a &quot;static site generator&quot;. Many of those exist, you can take a look at them here:&lt;/p&gt;
&lt;p&gt;https://www.staticgen.com/&lt;/p&gt;
&lt;p&gt;But we want a way to generate our own set of files from Flask. Can we do it? Yes!&lt;/p&gt;
&lt;p&gt;Frozen Flask, http://pythonhosted.org/Frozen-Flask/ is a Flask extension that &quot;freezes&quot; your flask application into a set of static files. The purpose of my application will be to show a list of blog posts and a little bit about me on the home page. Flask is very flexible when it comes to structuring files, so here's how I went ahead and initially organized them:&lt;/p&gt;
&lt;p&gt;blogging-site
    /build 
        #this is my build directly where I'm storing my Freezer() instance of my flask app and pushing this to github pages
    /posts
        #this is where my posts will be stored, in markdown
    /static
        #where my CSS files live
    /templates
        #where my HTML templates live
    CNAME #place to put my IP address for my site
    generator.py 
    #the python file that will show my routes, Flask instance, and generate my static files 
    + plus any additional python files for adding functionality&lt;/p&gt;
&lt;p&gt;It's pretty simple. If you take a look at the file structure of a Rails app, it's much much more complicated. I found when first learning about web development it was a easier to start off with something like Flask to get a better understanding of the kind of functionality that needs to go into a web application before diving into the Rails file structure. &lt;/p&gt;
&lt;p&gt;Hooking into Github, things to keep in mind&lt;/p&gt;
&lt;p&gt;Site must be on the gh-pages branch. Stored in a Github repo you can clone locally.&lt;/p&gt;</content>
  </entry>
</feed>
